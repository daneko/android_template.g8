buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.10.+'
        classpath 'org.robolectric.gradle:gradle-android-test-plugin:0.10.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.2+'
    }
}

apply plugin: 'android'
// https://bitbucket.org/hvisser/android-apt
apply plugin: 'android-apt'
apply plugin: 'android-test'

// http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
// https://github.com/stephanenicolas/Quality-Tools-for-Android
apply plugin: 'findbugs'


android {

    compileSdkVersion $targetSdkVersion$
    buildToolsVersion "$buildToolsVersion$"

    defaultConfig {
        minSdkVersion $minSdkVersion$
        targetSdkVersion $targetSdkVersion$
        versionCode $versionCode$
        versionName "$versionName$"
    }

    buildTypes {
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    // http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Product-flavors
    productFlavors {
      dev{}
      stage{}
      product{}
    }

    // http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-options
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // lib追加時に競合するものとかをexcludeとして追加
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }
}

apt {
    arguments {
        androidManifestFile variant.processResources.manifestFile
    }
}

dependencies {
    apt 'org.androidannotations:androidannotations:3.0.+'
    compile "org.androidannotations:androidannotations-api:3.0+"

    apt 'org.projectlombok:lombok:1.12.+'
    provided 'org.projectlombok:lombok:1.12.+'

    compile 'com.google.code.findbugs:jsr305:2.0.+'

    compile fileTree(dir: 'libs', include: ['*.jar'])
}

task findbugs(type: FindBugs) {
    excludeFilter file('findbugs-exclude-filter.xml')
    classes = fileTree('build/classes/debug/')
    source = fileTree('src/main/java/')
    classpath = files( project.configurations.compile.asPath )
    effort = 'max'
}
